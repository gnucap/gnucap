#$Id: Make3  $ -*- Makefile -*-
# Copyright (C) 2001 Albert Davis
# Author: Albert Davis <aldavis@gnu.org>
#
# This file is part of "Gnucap", the Gnu Circuit Analysis Package
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.
#------------------------------------------------------------------------
# Part 3 of a Makefile
#------------------------------------------------------------------------
MKDIR_P = mkdir -p
am__base_list = cat # for now
INSTALL = install -m 644
#------------------------------------------------------------------------
all: $(TARGET) ${TARGET_LIB:%=%${TARGET_LIB_EXT}} ${TARGET_EXE:%=%${TARGET_EXE_EXT}}
#------------------------------------------------------------------------
tags: $(HDRS) $(SRCS)
	etags --c++ $(HDRS) $(SRCS)
#------------------------------------------------------------------------
checkout:
	co $(RAW)
#------------------------------------------------------------------------
install-debug : install
#------------------------------------------------------------------------
install-files: $(INSTALL_FILES)
	@list='$(INSTALL_FILES)'; test -n "$(INSTALL_DIR)" || list=; \
	if test -n "$$list"; then \
	  echo " $(MKDIR_P) '$(DESTDIR)$(INSTALL_DIR)'"; \
	  $(MKDIR_P) "$(DESTDIR)$(INSTALL_DIR)" || exit 1; \
	fi; \
	for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  echo "$$d$$p"; \
	done | $(am__base_list) | \
	while read files; do \
	  echo " $(INSTALL) $$files '$(DESTDIR)$(INSTALL_DIR)'"; \
	  $(INSTALL) $$files "$(DESTDIR)$(INSTALL_DIR)" || exit $$?; \
	done
#------------------------------------------------------------------------
install : install-files  $(INSTALL_FILES_1)  $(INSTALL_FILES_2)
	[ -z "$(INSTALL_DIR_1)" ] || ${MKDIR_P} $(DESTDIR)$(INSTALL_DIR_1)
	[ -z "$(INSTALL_DIR_2)" ] || ${MKDIR_P} $(DESTDIR)$(INSTALL_DIR_2)
	[ -z "$(INSTALL_FILES_1)" ] || cp $(INSTALL_FILES_1) $(DESTDIR)$(INSTALL_DIR_1)
	[ -z "$(INSTALL_FILES_2)" ] || cp $(INSTALL_FILES_2) $(DESTDIR)$(INSTALL_DIR_2)
#------------------------------------------------------------------------
uninstall :
	(cd $(DESTDIR)$(INSTALL_DIR) ; rm -f $(INSTALL_FILES))
	(cd $(DESTDIR)$(INSTALL_DIR_1) ; rm -f $(INSTALL_FILES_1))
	(cd $(DESTDIR)$(INSTALL_DIR_2) ; rm -f $(INSTALL_FILES_2))
#------------------------------------------------------------------------
#unclean:
#	rm $(ALL)
#------------------------------------------------------------------------
backup:
	mkdir -p BACKUP
	cp $(RAW) BACKUP
#------------------------------------------------------------------------
#   depend: Make.depend
#   Make.depend: $(SRCS) $(HDRS)
#   	[ -z "$+" ] ||	(cd ${srcdir}; $(CXX) -MM $(CCFLAGS) ${MAKE_CPPFLAGS} ${CPPFLAGS} $(SRCS) > Make.depend)
#   #	[ -z "$+" ] || $(CXX) -MM $(CCFLAGS) ${MAKE_CPPFLAGS} ${CPPFLAGS} $+ > ${srcdir}/Make.depend
#------------------------------------------------------------------------
depend ${srcdir}/Make.depend: # $(SRCS) ${GENERATED_SRCS} $(HDRS)
	: > ${srcdir}/Make.depend
	if [ -n "$(RAW_SRCS)" ]; then \
		( cd ${srcdir}; $(CXX) -MM $(CXXFLAGS) -I../include ${CPPFLAGS} \
		${MAKE_CPPFLAGS} ${RAW_SRCS} -DDEPEND ) \
		>> ${srcdir}/Make.depend; \
	fi
	for i in $(GENERATED_SRCS); do \
		echo $${i%cc}o: $${i} >> ${srcdir}/Make.depend; \
		( cd ${srcdir}; $(CXX) -xc++ -MT $${i%cc}o -MM $(CXXFLAGS) -I ../include -isystem ${CURDIR}  ${CPPFLAGS} \
		${MAKE_CPPFLAGS} -DDEPEND - < ${CURDIR}/$$i >> Make.depend ); \
		$(CXX) -MM $(CXXFLAGS) -isystem ${top_srcdir}/include ${CPPFLAGS} \
		${MAKE_CPPFLAGS} $$i -DDEPEND \
		>> ${srcdir}/Make.depend; \
	done
	
#-----------------------------------------------------------------------------
date:
	date "+#define PATCHLEVEL \"`git branch | awk '/\*/ { print $$2; }'` %Y.%m.%d\"" \
		>patchlev.h
#-----------------------------------------------------------------------------
header-check:
	-$(CXX) -I../include -o /dev/null $(RAW_HDRS)
#-----------------------------------------------------------------------------
manifest: MANIFEST
MANIFEST: $(DIST_FILES)
	echo $(DIST_FILES) | sed 's/ /\n/g' >MANIFEST
#-----------------------------------------------------------------------------
md5sums: MD5SUMS
MD5SUMS: $(DIST_FILES)
	md5sum $(DIST_FILES) | grep -v MD5SUMS >MD5SUMS
#-----------------------------------------------------------------------------
mostlyclean:
	rm -rf $(MOSTLYCLEANFILES)
	rm -f */*.o */*.obj */*.h */*.cc
clean:
	rm -rf $(CLEANFILES)
	rm -f */*.o */*.obj */*.h */*.cc
distclean:
	rm -rf $(DISTCLEANFILES)
	rm -f */*.o */*.obj */*.h */*.cc
	rm -f *~ \#*\#
maintainer-clean:
	rm -rf $(MAINTAINERCLEANFILES)
	rm -f */*.o */*.obj */*.h */*.cc
	rm -f *~ \#*\#
#-----------------------------------------------------------------------------
#-----------------------------------------------------------------------------
$(TARGET_EXE)$(TARGET_EXE_EXT): $(TARGET_DEPENDS)
	rm -f $@
	$(MAKE_EXE) # -o $@
#------------------------------------------------------------------------
#------------------------------------------------------------------------
$(TARGET_LIB)$(TARGET_LIB_EXT): $(TARGET_DEPENDS)
	rm -f $@
	$(MAKE_LIB) # -o $@
#------------------------------------------------------------------------
#------------------------------------------------------------------------
%.cc %.h: %.model
	${ENV} $(MODELGEN) $< #  Make3 rule
	@touch $*.cc
#------------------------------------------------------------------------
.PHONY: depend install-files install
#------------------------------------------------------------------------
