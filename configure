#!/bin/sh
# top level configure for Gnucap

echo -n '# ' > config.log
date >> config.log
echo $0 "$@" >> config.log

#-------------  transition
# stale. make sure to avoid interference
find . -name makefile -delete

#-------------  Stuff added to enable --prefix  --------------
prefix=/usr/local
prefix_given=no
srcdir_given=no
preset=default
force_in_tree=no
srcdir=$(dirname $0)

while [ 0 -ne $# ]; do
	case "$1" in
		--prefix=*)
			  prefix=${1#--prefix=}
			  prefix_given=yes
			  ;;
		--enable-debug)
			  preset=Debug
			  ;;
		--srcdir=*)
			  srcdir=${1#--srcdir=}
			  srcdir_given=yes
			  ;;
		--force-in-tree)
			  force_in_tree=yes
			  ;;
		--preset=*)
			  preset=${1#--preset=}
			  ;;
		*)
			echo unrecognised: "$1"
			;;
	esac
	shift
done
#----------------------------------------------------------------
# abs_srcdir=$(cd $srcdir; pwd)
if [ -f $srcdir/NEWS ]; then
	: # OK
elif [ $srcdir_given = "yes" ]; then
	: # OK
else
	echo could not find source directory
	exit 1
fi
#----------------------------------------------------------------
top_srcdir=$(dirname $0)
if [ -f $top_srcdir/NEWS ]; then
	: # OK
else
	echo could not find source directory
	exit 1
fi
#----------------------------------------------------------------
if [ -d .git ]; then
	:
elif [ -f $srcdir/NEWS ]; then
	echo \* > .gitignore
fi
#----------------------------------------------------------------
MAKE1_SUBDIRS=$(grep -m 1 SUBDIRS $srcdir/Make1 | sed 's/^.*= //g')
SUBDIRS="${MAKE1_SUBDIRS}"
#----------------------------------------------------------------
if [ ! -f $top_srcdir/include/Make2.$preset ]; then
	echo "invalid preset" >&2
	echo "can't find $srcdir/include/Make2.$preset" >&2
	exit 1;
fi
#----------------------------------------------------------------
echo prefix is $prefix
echo preset is $preset
#----------------------------------------------------------------
out_of_tree=yes
top_srcdir_=top_srcdir
case $srcdir in
	[\\/]* | ?:[\\/]*)
		top_srcdir_="$srcdir"
		;;
	\.)
		top_srcdir_=".."
		out_of_tree=no
		;;
	*)
		top_srcdir_="../$srcdir"
		;;
esac
#----------------------------------------------------------------
sub_makefile() {
	echo sub_makefile $1
	echo \# created by $0 do not edit >$1
	echo \#------------------------------------------------------------------------ >>Make2
	echo "top_srcdir = $top_srcdir" >> $1
	echo "srcdir = ${srcdir}" >> $1
	echo "VPATH = \${srcdir}" >> $1
	echo "MAKE1_FIX = #" >> $1
	echo "include \${srcdir}/Make1" >> $1
	echo "INCLUDE = " >> $1
	echo "PRESET = default" >> $1
	echo "include ../Make2" >> $1
	echo "include $top_srcdir/include/Make3" >> $1
	echo "-include \${srcdir}/Make.depend" >> $1
}
#------------------------------------------------------------------------
if [ -f $srcdir/makefile.in ]; then
	echo \# created by $PWD/$0. do not edit >makefile
	echo \#------------------------------------------------------------------------ >>makefile
	echo "srcdir = $srcdir" >> makefile
	echo "VPATH = \${srcdir}" >> makefile
	cat $srcdir/makefile.in >> makefile
else
	sub_makefile makefile
fi
#------------------------------------------------------------------------
if [ $out_of_tree = "yes" ]; then
	: # OK
elif [ $force_in_tree = "yes" ]; then
	: # OK
elif [ -f NEWS ]; then
	echo "Really configure in-tree?" >&2
   echo "Hit ^C to avoid or wait for 1 minute." >&2
   echo "Bypass this check with --force-in-tree." >&2
	for i in `seq 60`; do sleep 1; echo -n '.'; done
	echo;
else
	: # configuring some subdir
fi
#------------------------------------------------------------------------
echo \# created by $PWD/$0. do not edit >Make2
echo \#------------------------------------------------------------------------ >>Make2
echo "CXX = c++" >>Make2
echo "PREFIX = " $prefix >>Make2
echo "ENV = LD_LIBRARY_PATH=../lib\${LD_LIBRARY_PATH:%=:%}" >>Make2
echo "LDFLAGS = -L../lib" >>Make2
echo "GNUCAP_CONF = ../conf/gnucap-conf" >>Make2
#------------------------------------------------------------------------
# "MAKE_CPPFLAGS": not a user variable like CPPFLAGS
#                  add ${INCLUDE} when overriding in Make2.*
echo "INCLUDE = -I${top_srcdir_}/include -I../conf" >>Make2
###//BUG// echo "MAKE_CPPFLAGS = \${INCLUDE}" >>Make2
#------------------------------------------------------------------------
echo "PRESET = ${preset}" >> Make2
echo "include ${top_srcdir_}/include/Make2.\${PRESET}" >>Make2
#------------------------------------------------------------------------
sub_configure() {
	echo sub_configure $1
	m="$1/Makefile"
	if [ "$top_srcdir_" = ".." ]; then
		srcdir_=".";
	else
		srcdir_="$top_srcdir_/$1";
	fi
	echo '#stub. need to run configure first' > $m
	echo "srcdir = $srcdir_" >> $m
	echo "prefix = $prefix" >> $m
	echo '%: ; ${srcdir}/configure --prefix="${prefix}" --srcdir="${srcdir}" && ${MAKE} $@' >> $m
	echo 'all: ; ${srcdir}/configure --prefix="${prefix}" --srcdir="${srcdir}" && ${MAKE}' >> $m
	echo '.PHONY: all' >> $m
}
#------------------------------------------------------------------------
subdir_configure() {
	echo subdir_configure $1
	m="$1/Makefile"
	if [ "$top_srcdir_" = ".." ]; then
		srcdir_=".";
	else
		srcdir_="$top_srcdir_/$1";
	fi
	echo '#stub. need to run configure first' > $m
	echo "top_srcdir = $top_srcdir_" >> $m
	echo "srcdir = $srcdir_" >> $m
	echo "prefix = $prefix" >> $m
	echo '%: ; ${top_srcdir}/configure --prefix="${prefix}" --srcdir="${srcdir}" && ${MAKE} $@' >> $m
	echo 'all: ; ${top_srcdir}/configure --prefix="${prefix}" --srcdir="${srcdir}" && ${MAKE}' >> $m
	echo '.PHONY: all' >> $m
}
#------------------------------------------------------------------------
for i in ${SUBDIRS}; do
	mkdir -p $i;
	if [ -f $srcdir/$i/configure ]; then
		sub_configure $i;
	else
		subdir_configure $i;
	fi
done
#------------------------------------------------------------------------
exit 0
