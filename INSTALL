Installation Instructions
*************************

This program does not use "autoconf" but configure imitates most of its
behaviour. There is no need to generate a build system.

The scripts are recursive, so you can cd to any of the subdirectories
and run make there, once configure is done.

$ mkdir build # or any other directory name
$ cd build
$ ../configure
$ make

additional options:

--prefix=...   set installation prefix, default: /usr/local
--preset=...   select preset for flags.
               "default": normal build (default).
               "Debug": extra warnings and debugging.
               "g++": don't know.
--enable-debug shorthand for --preset=Debug

Installation:

To make full use of the package, we recommend to install it. Make sure that
$prefix/bin is in your PATH environment, and $prefix/lib is either a system
path, or added to LD_LIBRARY_PATH. (details will vary across platforms.).

== Old build system

See INSTALL.old, configure.old etc.

== Dynamic library search path

When a using a non-default prefix for installation, you may have to help the
dynamic loader to find the library during startup. Try the following.

$ export LD_LIBRARY_PATH=/some/other/prefix/lib
$ gnucap
[..]
gnucap> _

On some systems not even /usr/local/lib (where libgnucap.so is installed by
default) is searched for libraries. On these systems, an environment variable
may be used to run gnucap anyway.

$ export LD_LIBRARY_PATH=/usr/local/lib

Sometimes, /usr/local/lib is a system library path, but the cache is dirty.
On Linux ldconfig may help.

$ ldconfig -p |grep gnucap
[nothing]
# ldconfig (with root permissions, e.g. sudo)
$ ldconfig -p |grep gnucap
[..] /usr/local/lib/libgnucap.so [..]

== Other targets:
$ make install              # installs to prefix.
$ make install DESTDIR=...  # staged install (nih).

Additional targets (TODO, sync)
