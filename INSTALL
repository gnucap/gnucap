Installation Instructions
*************************

This program does not use "autoconf" but rather uses a simple script
that provides a subset with a similar interface.

In most cases, you can do:
=======
$ ./configure
$ make
$ make install # (requires write permissions to /usr/local, maybe use sudo)
=======

The scripts are recursive, so you can cd to any of the subdirectories
and run make there, once configure is done.

By default, it installs in /usr/local .  To change it, you can specify a prefix:

./configure --prefix=/usr/share

If you have already compiled it, you do not need to recompile to
change the install directory.  Just ./configure and make install.

== Dynamic library search path

When a using a non-default prefix for installation, you may have to help the
dynamic loader to find the library during startup. Try the following.

$ export LD_LIBRARY_PATH=/some/other/prefix/lib
$ gnucap
[..]
gnucap> _

On some systems not even /usr/local/lib (where libgnucap.so is installed by
default) is searched for libraries. On these systems, an environment variable
may be used to run gnucap anyway.

$ export LD_LIBRARY_PATH=/usr/local/lib

Sometimes, /usr/local/lib is a system library path, but the cache is dirty.
On Linux ldconfig may help.

$ ldconfig -p |grep gnucap
[nothing]
# ldconfig (with root permissions, e.g. sudo)
$ ldconfig -p |grep gnucap
[..] /usr/local/lib/libgnucap.so [..]

== Other targets:

"make clean" removes object files.

"make debug" builds a development version with additional debugging
code enabled.  It runs about 2x slower than the standard build.

"make depend" builds the files "Make.depend" which are used to decide
what to rebuild.  You need to do this only if you modify the code in a
way that changes what files are included by #include.

"make tags" builds cross reference files that can be used by some
editors, such as emacs, to navigate the code.

"make manifest" builds a list of the files included in a distribution.
