Installation Instructions
*************************

This program does not use "autoconf" but the configure script imitates some of
its behaviour. There is no need to generate the build system.

The scripts are recursive, so you can change to any of the subdirectories and
run make there, once configure is done.

The configure invocation will be logged in config.log in each subdirectory.

== Basic build instructions

The following commands will compile the package. The top level source directory
is the one containing these instructions.

$ (cd top_level_source_directory)
$ mkdir build # or any other directory name
$ cd build
$ ../configure
$ make

Additional options are

--prefix=...   set installation prefix, default: /usr/local
--preset=...   select preset for flags.
               "default": normal build (default).
               "Debug": extra warnings and debugging.
               "g++": don't know.
--enable-debug shorthand for --preset=Debug

Installation:

To make full use of the package, we recommend to install it using

$ make install

Make sure that $prefix/bin is in your PATH environment variable, and
$prefix/lib is either a system path, or added to LD_LIBRARY_PATH. (details will
vary across platforms.).

Afterwards the main program should run. The versions should match those in
include/patchlev.h.

$ gnucap
[..]
main version: [..]
core-lib version: [..]
default plugins: [..]
gnucap> _

== Submodules

Additional packages can be compiled/installed using a similar method once this
package has been installed into the system.

Alternatively, suitable packages located at the top level source directory will
be included in the build process. For example

$ (cd top_level_source_directory)
$ git clone https://git.savannah.gnu.org/cgit/gnucap/gnucap-modelgen-verilog.git modelgen-v
$ mkdir build # or any other directory name
$ cd build
$ ../configure
$ make

The programs will run directly from the build directory given a suitable
environment. It should be sufficient to set PATH, LD_LIBRARY_PATH and
GNUCAP_PLUGPATH to the corresponding locations in the build tree.

== Old build system

See INSTALL.old, configure.old etc.

== Dynamic library search path

When a using a non-default prefix for installation, you may have to help the
dynamic loader to find the library during startup. Try the following.

$ export LD_LIBRARY_PATH=/some/other/prefix/lib
$ gnucap
[..]
gnucap> _

On some systems not even /usr/local/lib (where libgnucap.so is installed by
default) is searched for libraries. On these systems, an environment variable
may be used to run gnucap anyway.

$ export LD_LIBRARY_PATH=/usr/local/lib

Sometimes, /usr/local/lib is a system library path, but the cache is dirty.
On Linux ldconfig may help.

$ ldconfig -p |grep gnucap
[nothing]
# ldconfig (with root permissions, e.g. sudo)
$ ldconfig -p |grep gnucap
[..] /usr/local/lib/libgnucap.so [..]

== Other targets:
$ make install              # installs to prefix.
$ make install DESTDIR=...  # staged install (nih).

Additional targets (TODO, sync)
